
import { useState } from 'react';
import { Copy, ThumbsUp, ThumbsDown, RotateCcw, User, Bot } from 'lucide-react';
import { Button } from '@/components/ui/button';
import { Message } from '@/pages/Index';

interface MessageBubbleProps {
  message: Message;
  onCopy: () => void;
}

export function MessageBubble({ message, onCopy }: MessageBubbleProps) {
  const [showActions, setShowActions] = useState(false);
  const [feedback, setFeedback] = useState<'up' | 'down' | null>(null);

  const isUser = message.role === 'user';
  const isAssistant = message.role === 'assistant';

  return (
    <div 
      className={`flex items-start gap-4 group ${isUser ? 'justify-end' : ''}`}
      onMouseEnter={() => setShowActions(true)}
      onMouseLeave={() => setShowActions(false)}
    >
      {!isUser && (
        <div className="w-8 h-8 rounded-full bg-green-500 flex items-center justify-center text-white font-semibold text-sm flex-shrink-0">
          <Bot className="h-4 w-4" />
        </div>
      )}
      
      <div className={`flex-1 max-w-[70%] ${isUser ? 'order-first' : ''}`}>
        <div
          className={`rounded-lg p-4 ${
            isUser 
              ? 'bg-gray-800 text-white ml-auto' 
              : 'bg-gray-100 text-gray-800'
          }`}
        >
          <div className="whitespace-pre-wrap break-words">
            {message.content}
          </div>
          
          {message.model && isAssistant && (
            <div className="mt-2 text-xs opacity-70">
              Generated by {message.model}
            </div>
          )}
        </div>

        {/* Message Actions */}
        {showActions && isAssistant && (
          <div className="flex items-center gap-1 mt-2 opacity-0 group-hover:opacity-100 transition-opacity">
            <Button
              size="sm"
              variant="ghost"
              onClick={onCopy}
              className="h-7 w-7 p-0 hover:bg-gray-200"
            >
              <Copy className="h-3 w-3" />
            </Button>
            
            <Button
              size="sm"
              variant="ghost"
              onClick={() => setFeedback(feedback === 'up' ? null : 'up')}
              className={`h-7 w-7 p-0 hover:bg-gray-200 ${
                feedback === 'up' ? 'bg-green-100 text-green-600' : ''
              }`}
            >
              <ThumbsUp className="h-3 w-3" />
            </Button>
            
            <Button
              size="sm"
              variant="ghost"
              onClick={() => setFeedback(feedback === 'down' ? null : 'down')}
              className={`h-7 w-7 p-0 hover:bg-gray-200 ${
                feedback === 'down' ? 'bg-red-100 text-red-600' : ''
              }`}
            >
              <ThumbsDown className="h-3 w-3" />
            </Button>
          </div>
        )}
        
        <div className="text-xs text-gray-500 mt-1">
          {message.timestamp.toLocaleTimeString([], { 
            hour: '2-digit', 
            minute: '2-digit' 
          })}
        </div>
      </div>

      {isUser && (
        <div className="w-8 h-8 rounded-full bg-gray-800 flex items-center justify-center text-white font-semibold text-sm flex-shrink-0">
          <User className="h-4 w-4" />
        </div>
      )}
    </div>
  );
}
